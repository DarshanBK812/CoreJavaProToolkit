package DSA.sinlgeLinkedList;

public class SingleLinkedListImplimentation {

	Node head = null;
	Node tail = null;
	int count = 0;

	public void append(int data) {
		Node node = new Node(data);
		if (head == null && tail == null) {
			head = node;
			tail = node;
		} else {
			tail.next = node;
			tail = node;
		}
		count++;
	}

	public void prepend(int data) {
		Node node = new Node(data);

		if (head == null && tail == null) {
			head = node;
			tail = node;
		} else {
			node.next = head;
			head = node;
		}
		count++;
	}

	public void insertAtMid(int data, int pos) {
		Node node = new Node(data);
		if (pos < 1 || pos > count) {
			System.out.println("Invalid Option");
			return;
		}
		 if(pos == 1) {
			prepend(data);
		}else if(pos == count) {
			append(data);
		}else {
			Node temp = head;
			for (int i = 1; i < pos; i++) {
				temp = temp.next;
			}
			
			node.next = temp.next;
			temp.next = node;
			count++;
		}

	}

	public void display() {
		if (head == null && tail == null) {
			System.out.println("Linked List is empty");
			return;
		}
		Node temp = head;
		while (temp != null) {
			System.out.print(temp.data + " ");
			temp = temp.next;
		}
	}

	public static void main(String[] args) {
		SingleLinkedListImplimentation implimentation = new SingleLinkedListImplimentation();
		implimentation.append(2);
		implimentation.prepend(1);
		implimentation.append(4);
		implimentation.insertAtMid(3, 2);
		implimentation.insertAtMid(0, 1);
		implimentation.display();

	}

}
