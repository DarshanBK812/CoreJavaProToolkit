package DSA.doubleLinkedList;

public class DoubleLinkedListImplimentation {

	Node head = null;
	Node tail = null;
	int count = 0;

	public void append(int data) {

		Node node = new Node(data);

		if (head == null && tail == null) {
			head = node;
			tail = node;
		} else {
			tail.next = node;
			node.prev = tail;
			tail = node;
		}

		count++;
	}

	public void prepend(int data) {

		Node node = new Node(data);

		if (head == null && tail == null) {
			head = node;
			tail = node;
		} else {
			node.next = head;
			head.prev = node;
			head = node;
		}

		count++;
	}

	public void insertAtMiddle(int data, int pos) {

		if (count < 1 || pos > count) {
			System.out.println("Invalid Option");
			return;
		}

		if (pos == 1) {
			prepend(data);
		} else {
			Node node = new Node(data);
			Node temp = head;
			for (int i = 1; i < pos; i++) {
				temp = temp.next;
			}
			node.next = temp.next;
			temp.next.prev = node;
			temp.next = node;
			node.prev = temp;
			count++;
		}
	}

	public void deleteNode(int pos) {
		if (pos < 1 || pos > count) {
			System.out.println("Invalid Option");
			return;
		}
		if (head == null && tail == null) {
			System.out.println("List is empty");
			return;
		}
		if (pos == 1) {
			Node deleteNode = head;
			head = head.next;
			deleteNode = null;
		} else if (pos == count) {
			tail = tail.prev;
			tail.next = null;
		} else {
			Node temp = head;
			for (int i = 1; i < pos; i++) {
				temp = temp.next;
			}

//			temp.next = temp.next.next;
//			temp.next.next.prev = temp;
//			count--;

			temp.next.prev = temp.prev;
			temp.prev.next = temp.next;
			temp = null;
		}
		count--;

	}

	public void display() {
		if (head == null && tail == null) {
			System.out.println("List is Empty");
			return;
		}

		Node temp = head;
		while (temp != null) {
			System.out.print(temp.data + " ");
			temp = temp.next;
		}
	}

	public static void main(String[] args) {
		DoubleLinkedListImplimentation doubleLinkedListImplimentation = new DoubleLinkedListImplimentation();
		doubleLinkedListImplimentation.append(2);
		doubleLinkedListImplimentation.prepend(1);
		doubleLinkedListImplimentation.append(4);
		doubleLinkedListImplimentation.insertAtMiddle(3, 2);
		doubleLinkedListImplimentation.insertAtMiddle(0, 1);
		doubleLinkedListImplimentation.insertAtMiddle(5, 5);
		doubleLinkedListImplimentation.deleteNode(5);
		doubleLinkedListImplimentation.display();// 0 1 2 3 4 5

	}

}
