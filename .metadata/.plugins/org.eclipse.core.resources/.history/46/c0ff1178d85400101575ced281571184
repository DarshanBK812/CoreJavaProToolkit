package DSA.binarySearchTree;

public class BST_Implimenation {

	Node root;

	public void insert(int data) {
		root = insertRec(root, data);
	}

	public Node insertRec(Node root, int data) {
		if (root == null) {
			return new Node(data);
		}
		if (data < root.data) {
			root.left = insertRec(root.left, data);
		} else if (data > root.data) {
			root.right = insertRec(root.right, data);
		}

		return root;

	}

	public void inorder() {
		inorderrec(root);
		System.out.println();
	}

	public void inorderrec(Node root) {
		if (root != null) {
			inorderrec(root.left);
			System.out.print(root.data);
			inorderrec(root.right);
		}
	}

	public static void main(String[] args) {
		BST_Implimenation bst = new BST_Implimenation();

		bst.insert(50);
		bst.insert(30);
		bst.insert(70);
		bst.insert(20);
		bst.insert(40);
		bst.insert(60);
		bst.insert(80);
		
		bst.inorder();
	}

}
